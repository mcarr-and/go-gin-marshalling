apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: Service
  metadata:
    namespace: "album-store"
    name: "album-store"
    annotations:
      prometheus.io/probe: "true"
      prometheus.io/probe-path: /
    labels:
      app.kubernetes.io/name: "album-store"
      app.kubernetes.io/instance: "album-store"
      app.kubernetes.io/version: "0.1"
  spec:
    internalTrafficPolicy: Cluster
    ipFamilies:
      - IPv4
    ipFamilyPolicy: SingleStack
    ports:
      - protocol: TCP
        name: http
        port: 9080
        targetPort: 9080
    selector:
      app.kubernetes.io/name: "album-store"
      app.kubernetes.io/instance: "album-store"
      app.kubernetes.io/version: "0.1"
    sessionAffinity: None
    type: ClusterIP
---
apiVersion: v1
kind: List
items:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/name: "album-store"
        app.kubernetes.io/instance: "album-store"
        app.kubernetes.io/version: "0.1"
        app: "album-store"
      name: "album-store"
      namespace: "album-store"
    spec:
      replicas: 3
      selector:
        matchLabels:
          app.kubernetes.io/name: "album-store"
          app.kubernetes.io/component: "album-store"
          app.kubernetes.io/instance: "album-store"
      strategy:
        rollingUpdate:
          maxSurge: 0
          maxUnavailable: 1
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: "album-store"
            app.kubernetes.io/name: "album-store"
            app.kubernetes.io/component: "album-store"
            app.kubernetes.io/instance: "album-store"
            app.kubernetes.io/version: "0.1"
        spec:
          containers:
            - name: "album-store"
              image: registry.local:54094/album-store:0.1 # use the cluster internal name to reference registry
              imagePullPolicy: IfNotPresent
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "250m"
                limits:
                  memory: "128Mi"
                  cpu: "500m"
              ports:
                - containerPort: 9080
                  name: http
                  protocol: TCP
              env:
                - name: INSTANCE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: OTEL_LOCATION
                  value: "opentelemetry-collector.observability.svc.cluster.local:4317"
                - name: GRPC_GO_LOG_VERBOSITY_LEVEL
                  value: "99"
                - name: GRPC_GO_LOG_SEVERITY_LEVEL
                  value: "info"
          dnsPolicy: ClusterFirst # must be `ClusterFirst` to allow nginx to route to it via the ingress
          restartPolicy: Always
          schedulerName: default-scheduler
          serviceAccountName: default
          enableServiceLinks: true
          terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: List
items:
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
        nginx.ingress.kubernetes.io/use-port-in-redirects: "true"
        app.kubernetes.io/name: "album-store"
      labels:
        app.kubernetes.io/name: "album-store"
        app.kubernetes.io/instance: "album-store"
        app.kubernetes.io/version: "0.1"
      name: "album-store"
      namespace: "album-store"
    spec:
      ingressClassName: nginx
      rules:
        - host: album-store.local
          http:
            paths:
              - backend:
                  service:
                    name: album-store
                    port:
                      number: 9080
                path: /
                pathType: ImplementationSpecific