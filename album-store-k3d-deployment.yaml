apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: "album-store"
    meta.helm.sh/release-namespace: "opentelemetry"
  labels:
    app.kubernetes.io/instance: "album-store"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "album-store"
    app.kubernetes.io/version: "v0.1"
  name: "album-store"
  namespace: "opentelemetry"
---
apiVersion: v1
kind: Pod
metadata:
  name: "album-store"
  namespace: "opentelemetry"
  labels:
    app.kubernetes.io/instance: "album-store"
    app.kubernetes.io/name: "album-store"
    app.kubernetes.io/version: "v0.1"
spec:
  containers:
    - name: "album-store"
      image: k3d-registry:54094/album-store:v0.1 # use the cluster internal name to reference registry
      command: ["/app/album-store"]
      resources:
        requests:
          memory: "64Mi"
          cpu: "250m"
        limits:
          memory: "128Mi"
          cpu: "500m"
      ports:
        - containerPort: 9080
          name: http
          protocol: TCP
      env:
        - name: INSTANCE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OTEL_LOCATION
          value: "opentelemetry-collector.opentelemetry.svc.cluster.local:4317"
        - name: GRPC_GO_LOG_VERBOSITY_LEVEL
          value: "99"
        - name: GRPC_GO_LOG_SEVERITY_LEVEL
          value: "info"
  restartPolicy: Never
  hostname: "album-store"
  serviceAccountName: "album-store"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "opentelemetry"
  name: "album-store"
  annotations:
    prometheus.io/probe: "true"
    prometheus.io/probe-path: /
  labels:
    app.kubernetes.io/instance: "album-store"
    app.kubernetes.io/name: "album-store"
    app.kubernetes.io/version: v0.1
spec:
  ports:
    - protocol: TCP
      name: http
      port: 9080
      targetPort: 9080
  selector:
    app.kubernetes.io/instance: "album-store"
    app.kubernetes.io/name: "album-store"
    app.kubernetes.io/version: v0.1
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/use-port-in-redirects: "true"
    app.kubernetes.io/name: "album-store"
  labels:
    app.kubernetes.io/instance: "album-store"
    app.kubernetes.io/name: "album-store"
    app.kubernetes.io/version: "v0.1"
  name: "album-store"
  namespace: opentelemetry
spec:
  ingressClassName: nginx
  rules:
    - host: album-store.local
      http:
        paths:
          - backend:
              service:
                name: "album-store"
                port:
                  number: 9080
            path: /
            pathType: ImplementationSpecific
---
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
##  annotations:
##    meta.helm.sh/release-name: "album-store"
##    meta.helm.sh/release-namespace: opentelemetry
#  labels:
#    app.kubernetes.io/instance: "album-store"
#    app.kubernetes.io/managed-by: Helm
#    app.kubernetes.io/name: "album-store"
#    app.kubernetes.io/version: v0.1
#  name: "album-store"
#  namespace: opentelemetry
#  resourceVersion: "12963"
#  uid: 9d2c2979-ef2e-4663-bf97-d12e23ec727a
#spec:
#  podManagementPolicy: OrderedReady
#  replicas: 1
#  revisionHistoryLimit: 10
#  selector:
#    matchLabels:
#      app.kubernetes.io/instance: "album-store"
#      app.kubernetes.io/name: "album-store"
#      app.kubernetes.io/version: v0.1
#  serviceName: "album-store"
#  template:
#    metadata:
##      annotations:
##        prometheus.io/path: /metrics
##        prometheus.io/port: "14269"
##        prometheus.io/scrape: "true"
#      labels:
#        app.kubernetes.io/instance: "album-store"
#        app.kubernetes.io/name: "album-store"
#    spec:
#      containers:
#        - env:
#            - name: INSTANCE_NAME
#              valueFrom:
#                fieldRef:
#                  fieldPath: spec.nodeName
#            - name: NAMESPACE
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.namespace
#            - name: OTEL_LOCATION
#              value: "opentelemetry-collector.opentelemetry.svc.cluster.local:4317"
#            - name: GRPC_GO_LOG_VERBOSITY_LEVEL
#              value: "99"
#            - name: GRPC_GO_LOG_SEVERITY_LEVEL
#              value: "info"
#          image: k3d-registry:54094/album-store:v0.1
#          imagePullPolicy: IfNotPresent
##          livenessProbe:
##            failureThreshold: 10
##            httpGet:
##              path: /
##              port: http-admin
##              scheme: HTTP
##            periodSeconds: 10
##            successThreshold: 1
##            timeoutSeconds: 1
#          name: "album-store"
#          ports:
#            - containerPort: 9080
#              name: http
#              protocol: TCP
##          readinessProbe:
##            failureThreshold: 3
##            httpGet:
##              path: /
##              port: http-admin
##              scheme: HTTP
##            periodSeconds: 10
##            successThreshold: 1
##            timeoutSeconds: 1
#          resources: {}
#          securityContext: {}
#          terminationMessagePath: /dev/termination-log
#          terminationMessagePolicy: File
#      dnsPolicy: ClusterFirst
#      restartPolicy: Always
#      schedulerName: default-scheduler
#      securityContext: {}
#      serviceAccountName: "album-store"
#      terminationGracePeriodSeconds: 10
#  updateStrategy:
#    rollingUpdate:
#      partition: 0
#    type: RollingUpdate
