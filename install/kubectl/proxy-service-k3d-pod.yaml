apiVersion: v1
kind: Service
metadata:
  namespace: "proxy-service"
  name: "proxy-service"
  annotations:
    prometheus.io/probe: "true"
    prometheus.io/probe-path: /status
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "9070"
  labels:
    app.kubernetes.io/instance: "proxy-service"
    app.kubernetes.io/name: "proxy-service"
    app.kubernetes.io/version: "0.1.0"
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - protocol: TCP
      name: http
      port: 9070
      targetPort: 9070
  selector:
    app.kubernetes.io/instance: "proxy-service"
    app.kubernetes.io/name: "proxy-service"
    app.kubernetes.io/version: "0.1.0"
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app.kubernetes.io/component: "proxy-service"
    app.kubernetes.io/instance: "proxy-service"
    app.kubernetes.io/name: "proxy-service"
    app.kubernetes.io/version: "0.1.0"
  name: "proxy-service"
  namespace: "proxy-service"
spec:
  containers:
    - name: "proxy-service"
      image: registry.local:54094/proxy-service:0.1 # use the cluster internal name to reference registry
      imagePullPolicy: Always
      env:
        - name: INSTANCE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OTEL_LOCATION
          value: "opentelemetry-collector.observability.svc.cluster.local:4317"
        - name: GRPC_GO_LOG_VERBOSITY_LEVEL
          value: "99"
        - name: GRPC_GO_LOG_SEVERITY_LEVEL
          value: "info"
        - name: ALBUM_STORE_URL
          value: "http://album-store.album-store.svc.cluster.local:9080"
      ports:
        - name: http
          containerPort: 9070
          protocol: TCP
      resources:
        requests:
          memory: "64Mi"
          cpu: "250m"
        limits:
          memory: "128Mi"
          cpu: "500m"
      livenessProbe:
        httpGet:
          path: /status
          port: http
        initialDelaySeconds: 1
        periodSeconds: 5
  dnsPolicy: ClusterFirst # must be `ClusterFirst` to allow nginx to route to it via the ingress
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
---
